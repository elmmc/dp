/*
一条直线上摆放着一行共n堆的石子。现要将石子有序地合并成一堆。规定每次只能选相邻的两堆合并成新的一堆，并将新的一堆石子数记为该次合并的得分。请编辑计算出将n堆石子合并成一堆的最小得分和将n堆石子合并成一堆的最大得分。
Input
输入有多组测试数据。

每组第一行为n(n<=100)，表示有n堆石子，。

二行为n个用空格隔开的整数，依次表示这n堆石子的石子数量ai（0<ai<=100）

Output
每组测试数据输出有一行。输出将n堆石子合并成一堆的最小得分和将n堆石子合并成一堆的最大得分。 中间用空格分开。
*/
/*
 思路：区间dp，dp[i][j]代表合并ij区间石子的得分，那么就有
 dp1[i][j]=min(dp1[i][j],dp1[i][l]+dp1[l+1][j]+ij区间的和);
 dp2[i][j]=min(dp2[i][j],dp1[i][l]+dp2[l+1][j]+ij区间的和);
 这题涉及到区间和，那么我们可以想到前缀和。
*/
```
#include<iostream>
#include<cstring>
using namespace std;
#define INF 0x3f3f3f3f
int s[205],S[205];
int dp1[205][205],dp2[205][205];
int main() {
    int n;
    while(cin>>n) {
        memset(dp1,0,sizeof(dp1));
        memset(dp2,0,sizeof(dp2));
        memset(s,0,sizeof(s));
        memset(S,0,sizeof(S));
        for(int i=1; i<=n; i++) {
            cin>>s[i];
            //s[n+i]=s[i];
        }
        for(int i=1; i<=n; i++) {
            S[i]=S[i-1]+s[i];
        }
        for(int i=2; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                int k=i+j-1;
                if(k>n+n)
                    break;
                dp1[j][k]=INF;
                dp2[j][k]=0;
                for(int l=j; l<k; l++) {
                    dp1[j][k]=min(dp1[j][k],dp1[j][l]+dp1[l+1][k]+S[k]-S[j-1]);
                    dp2[j][k]=max(dp2[j][k],dp2[j][l]+dp2[l+1][k]+S[k]-S[j-1]);
                }
            }
        }
        /*int minx=INF,maxn=0;
        for(int i=1; i<=n; i++) {
            minx=min(minx,dp1[i][n+i-1]);
            maxn=max(maxn,dp2[i][n+i-1]);
        }*/
        cout<<dp1[1][n]<<" "<<dp2[1][n]<<endl;
    }
}
```

/*
 一棵树的直径就是这棵树上存在的最长路径。现在有一棵n个节点的树，现在想知道这棵树的直径包含的边的个数是多少？



如图所示的数据，这棵树的直径为(1-2-3-6-9)这条路径，包含的边的个数为4，所以答案是4。

Input
第1行：一个整数n，表示树上的节点个数。(1<=n<=100000) 第2-n行：每行有两个整数u,v,表示u与v之间有一条路径。(1<=u,v<=n)
Output
输出一个整数，表示这棵树直径所包含的边的个数。
*/
/*
 思路：这题是个树形dp，不过边的权值为1。我用一个数组记录入度，入度为0的点就为根节点。
 从根节点开始dp，一个结点最长路径就是加上子节点中最长深度和第二长深度。
 只要遍历vector，找到最长深度和第二长深度在加上1，就是这个结点的最长路径。
 最后只要找到结点最大值就行。
*/
```
#include<iostream>
#include<cstring>
using namespace std;
#define INF 0x3f3f3f3f
int s[205],S[205];
int dp1[205][205],dp2[205][205];
int main() {
    int n;
    while(cin>>n) {
        memset(dp1,0,sizeof(dp1));
        memset(dp2,0,sizeof(dp2));
        memset(s,0,sizeof(s));
        memset(S,0,sizeof(S));
        for(int i=1; i<=n; i++) {
            cin>>s[i];
            //s[n+i]=s[i];
        }
        for(int i=1; i<=n; i++) {
            S[i]=S[i-1]+s[i];
        }
        for(int i=2; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                int k=i+j-1;
                if(k>n+n)
                    break;
                dp1[j][k]=INF;
                dp2[j][k]=0;
                for(int l=j; l<k; l++) {
                    dp1[j][k]=min(dp1[j][k],dp1[j][l]+dp1[l+1][k]+S[k]-S[j-1]);
                    dp2[j][k]=max(dp2[j][k],dp2[j][l]+dp2[l+1][k]+S[k]-S[j-1]);
                }
            }
        }
        /*int minx=INF,maxn=0;
        for(int i=1; i<=n; i++) {
            minx=min(minx,dp1[i][n+i-1]);
            maxn=max(maxn,dp2[i][n+i-1]);
        }*/
        cout<<dp1[1][n]<<" "<<dp2[1][n]<<endl;
    }
}
```
