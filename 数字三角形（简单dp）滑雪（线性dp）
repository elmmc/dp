/*
## 题目描述

观察下面的数字金字塔。

写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。

        7 
      3   8 
    8   1   0 
  2   7   4   4 
4   5   2   6   5 
在上面的样例中,从 7 \to 3 \to 8 \to 7 \to 57→3→8→7→5 的路径产生了最大

## 输入格式
第一个行一个正整数 rr ,表示行的数目。

后面每行为这个数字金字塔特定行包含的整数。

## 输出格式
单独的一行,包含那个可能得到的最大的和。

## 思路

这道题就是一个简单的dp，我们选择从下往上更新最优状态，因为这样状态转移就是
 dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+s[i][j];
这样最优解就在第一个，dp[1][1]。
从上往下更新的话，就会有特殊情况，s[2][1]只有一个来源dp[1][1]。
*/

## 代码
```
#include<iostream>
using namespace std;
int s[1005][1005],dp[1005][1005];
int main() {
    int n;
    cin>>n;
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=i; j++) {
            cin>>s[i][j];
            dp[i][j]=s[i][j];
        }
    }
    for(int i=n; i>=1; i--) {
        for(int j=1; j<=n; j++) {
            dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+s[i][j];
        }
    }
    cout<<dp[1][1]<<endl;
}
```

/*
## 题目描述
Michael 喜欢滑雪。这并不奇怪，因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael 想知道在一个区域中最长的滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：

1   2   3   4   5
16  17  18  19  6
15  24  25  20  7
14  23  22  21  8
13  12  11  10  9
一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度会减小。在上面的例子中，一条可行的滑坡为 2424－1717－1616－11（从 2424 开始，在 11 结束）。当然 2525－2424－2323－\ldots…－33－22－11 更长。事实上，这是最长的一条。

## 输入格式
输入的第一行为表示区域的二维数组的行数 RR 和列数 CC。下面是 RR 行，每行有 CC 个数，代表高度(两个数字之间用 11 个空格间隔)。

## 输出格式
输出区域中最长滑坡的长度。
*/

## 思路
这道题也可以用搜索写，用dp的话就有四个来源，上下左右都要考虑。
int res=0;
    if(dp[i][j])
        return dp[i][j];
    if(s[i-1][j]>s[i][j]&&i-1>0)
        res=max(res,DP(i-1,j));
    if(s[i+1][j]>s[i][j])
        res=max(res,DP(i+1,j));
    if(s[i][j-1]>s[i][j]&&j-1>0)
        res=max(res,DP(i,j-1));
    if(s[i][j+1]>s[i][j])
        res=max(res,DP(i,j+1));
    dp[i][j]=res+1;
return dp[i][j];
这里如果dp[i][j]值不为0，说明已经是最优状态，直接返回dp[i][j]。
最后遍历一遍dp数组，找最大值。
注意边界，不要越界。


```
#include<iostream>
using namespace std;
int s[1005][1005],dp[1005][1005];
int DP(int i,int j) {
    int res=0;
    if(dp[i][j])
        return dp[i][j];
    if(s[i-1][j]>s[i][j]&&i-1>0)
        res=max(res,DP(i-1,j));
    if(s[i+1][j]>s[i][j])
        res=max(res,DP(i+1,j));
    if(s[i][j-1]>s[i][j]&&j-1>0)
        res=max(res,DP(i,j-1));
    if(s[i][j+1]>s[i][j])
        res=max(res,DP(i,j+1));
    dp[i][j]=res+1;
    return dp[i][j];
}
int main() {
    int x,y;
    cin>>x>>y;
    for(int i=1; i<=x; i++) {
        for(int j=1; j<=y; j++) {
            cin>>s[i][j];
        }
    }
    for(int i=1; i<=x; i++) {
        for(int j=1; j<=y; j++) {
            if(!dp[i][j])
                dp[i][j]=DP(i,j);
        }
    }
    int res=0;
    for(int i=1; i<=x; i++) {
        for(int j=1; j<=y; j++) {
            res=max(res,dp[i][j]);
        }
    }
    cout<<res<<endl;
}
```
