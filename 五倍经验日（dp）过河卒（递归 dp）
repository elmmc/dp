/*
题目背景
现在乐斗有活动了！每打一个人可以获得5倍经验！absi2011却无奈的看着那一些比他等级高的好友，想着能否把他们干掉。干掉能拿不少经验的。

题目描述
现在absi2011拿出了x个迷你装药物(嗑药打人可耻….)，准备开始与那些人打了

由于迷你装一个只能管一次，所以absi2011要谨慎的使用这些药，悲剧的是，没到达最少打败该人所用的属性药了他打人必输>.<所以他用2个药去打别人，别人却表明3个药才能打过，那么相当于你输了并且这两个属性药浪费了。

现在有n个好友，有输掉拿的经验、赢了拿的经验、要嗑几个药才能打过。求出最大经验（注意，最后要乘以5）

输入格式
第一行两个数，n和x

后面n行每行三个数，分别表示输了拿到的经验(lose[i])、赢了拿到的经验(win[i])、打过要至少使用的药数量(use[i])。

输出格式
一个整数，最多获得的经验
*/

/*
  思路：
  这个题目是个简单dp，不过要同时考虑赢得情况和输的情况。
  dp[i]代表使用i个药物的情况下最大经验值，状态转移方程为（赢）dp[i]=max(dp[i]+输的经验,dp[i-赢要使用药的个数]+赢的经验)和（输）dp[j]加上输了的经验;
  最后输出的时候乘以5
*/
```
 #include<iostream>
using namespace std;
long long int dp[1005];
int w[1005],l[1005],sum[1005];
int main() {
    int n,x;
    cin>>n>>x;
    for(int i=1; i<=n; i++) {
        cin>>l[i]>>w[i]>>sum[i];
    }
    for(int i=1; i<=n; i++) {
        for(int j=x; j>=sum[i]; j--) {
            dp[j]=max(dp[j]+l[i],dp[j-sum[i]]+w[i]);
        }
        for(int j=sum[i]-1; j>=0; j--) {
            dp[j]+=l[i];
        }
    }
    cout<<5*dp[x];
}

```
/*
棋盘上 AA 点有一个过河卒，需要走到目标 BB 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 CC 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。

棋盘用坐标表示，AA 点 (0, 0)(0,0)、BB 点 (n, m)(n,m)，同样马的位置坐标是需要给出的。



现在要求你计算出卒从 AA 点能够到达 BB 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。

输入格式
一行四个正整数，分别表示 BB 点坐标和马的坐标。

输出格式
一个整数，表示所有的路径条数。
*/

/*
思路：
一开始我是用DFS写的，因为卒只能向右和下走，结果超时了，（20的数据竟然超时了...）
然后用dp，dp[i][j]代表卒到i,j这个点的走法数目。
状态转移方程就是 dp[i][j]=dp[i-1][j]+dp[i][j-1],一个来源在上，一个来源在左，如果这个位置被马控制，dp[i][j]=0。
于是，我们只要把马和马控制的位置标记起来，就可以了。
*/

DFS代码
```
#include<iostream>
#include<queue>
using namespace std;
long long int S[21][21],n,m,res=0;
struct zuobiao {
    int x,y;
} M;
void init(zuobiao M) {
    S[M.x][M.y]=1;
    if(M.x-1>=0&&M.y-2>=0) {
        S[M.x-1][M.y-2]=1;
    }
    if(M.x-2>=0&&M.y-1>=0) {
        S[M.x-2][M.y-1]=1;
    }
    if(M.x+1<=n&&M.y-2>=0) {
        S[M.x+1][M.y-2]=1;
    }
    if(M.x+2<=n&&M.y-1>=0) {
        S[M.x+2][M.y-1]=1;
    }
    if(M.x-2>=0&&M.y+1<=m) {
        S[M.x-2][M.y+1]=1;
    }
    if(M.x-1>=0&&M.y+2<=m) {
        S[M.x-1][M.y+2]=1;
    }
    if(M.x+1<=n&&M.y+2<=m) {
        S[M.x+1][M.y+2]=1;
    }
    if(M.x+2<=n&&M.y+1<=m) {
        S[M.x+2][M.y+1]=1;
    }
}
void DFS(int x,int y) {
    S[x][y]=1;
    if(x==n&&y==m) {
        res++;
        return;
    }
    if(x>n||x<0||y<0||y>m)
        return;
    if(!S[x+1][y]&&x+1<=n) {
        S[x+1][y]=1;
        DFS(x+1,y);
        S[x+1][y]=0;
    }
    if(!S[x][y+1]&&y+1<=m) {
        S[x][y+1]=1;
        DFS(x,y+1);
        S[x][y+1]=0;
    }
}
int main() {
    int a1,b1;
    cin>>n>>m>>a1>>b1;
    M.x=a1;
    M.y=b1;
    init(M);
    DFS(0,0);
    cout<<res<<endl;
}
```

dp代码
```
#include<iostream>
#include<queue>
using namespace std;
int S[25][25],n,m;
long long int dp[25][25];
struct zuobiao {
    int x,y;
} M;
void init(zuobiao M) {
    S[M.x][M.y]=1;
    if(M.x-1>=0&&M.y-2>=0) {
        S[M.x-1][M.y-2]=1;
    }
    if(M.x-2>=0&&M.y-1>=0) {
        S[M.x-2][M.y-1]=1;
    }
    if(M.x+1<=n&&M.y-2>=0) {
        S[M.x+1][M.y-2]=1;
    }
    if(M.x+2<=n&&M.y-1>=0) {
        S[M.x+2][M.y-1]=1;
    }
    if(M.x-2>=0&&M.y+1<=m) {
        S[M.x-2][M.y+1]=1;
    }
    if(M.x-1>=0&&M.y+2<=m) {
        S[M.x-1][M.y+2]=1;
    }
    if(M.x+1<=n&&M.y+2<=m) {
        S[M.x+1][M.y+2]=1;
    }
    if(M.x+2<=n&&M.y+1<=m) {
        S[M.x+2][M.y+1]=1;
    }
}
int main() {
    int a1,b1;
    cin>>n>>m>>a1>>b1;
    M.x=a1;
    M.y=b1;
    init(M);
    dp[1][0]=1;
    for(int i=1;i<=n+1;i++){
        for(int j=1;j<=m+1;j++){
            dp[i][j]=dp[i-1][j]+dp[i][j-1];
            if(S[i-1][j-1]) dp[i][j]=0;
        }
    }
    cout<<dp[n+1][m+1]<<endl;
}

```
